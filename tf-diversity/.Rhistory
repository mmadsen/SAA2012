pfg <- read.csv("~/Dropbox/Research/Data/pfg-richness-counts.csv")
View(pfg)
save.image("~/Dropbox/Research/Data/pfg-richness-analysis.RData")
plot(pfg$Count, pfg$Richness)
pfg-lt200-assem <- subset(pfg, pfg$Count < 200)
pfglt200assem <- subset(pfg, pfg$Count < 200)
View(pfglt200assem)
plot(pfglt200assem$Count, pfglt200assem$Richness)
pfglt100assem <- subset(pfg, pfg$Count < 100)
plot(pfglt100assem$Count, pfglt100assem$Richness)
pfglarge <- subset(pfg, pfg$Count >= 100)
plot(pfglarge$Count, pfglarge$Richness)
View(pfglarge)
save.image("~/Dropbox/Research/Data/pfg-richness-analysis.RData")
hist(pfglarge$Richness, freq=TRUE)
hist(pfglarge$Richness, freq=FALSE)
save.image("~/Dropbox/Research/Data/pfg-richness-analysis.RData")
cor(pfg$Count, pfg$Richness, method=spearman)
cor(pfg$Count, pfg$Richness, method="spearman")
r <- cor(pfg$Count, pfg$Richness, method="spearman")
r <- cor.test(pfg$Count, pfg$Richness, method="spearman")
r
dur2 <- read.table("~/Dropbox/Research/Data/richness-simulations/unique-traits-duration-2.txt", quote="\"")
View(dur2)
dur3 <- read.table("~/Dropbox/Research/Data/richness-simulations/unique-traits-duration-3.txt", quote="\"")
View(dur3)
setwd("~/Dropbox/Research/Data/richness-simulations")
dur5 <- read.table("~/Dropbox/Research/Data/richness-simulations/unique-traits-duration-5.txt", quote="\"")
View(dur5)
dur10 <- read.table("~/Dropbox/Research/Data/richness-simulations/unique-traits-duration-10.txt", quote="\"")
View(dur10)
summary(dur2)
summary(dur3)
summary(dur5)
summary(dur10)
hist(dur2$V1)
hist(dur3$V1)
hist(dur5$v1)
hist(dur5$V1)
hist(dur10$V1)
dur50 <- read.table("~/Dropbox/Research/Data/richness-simulations/unique-traits-duration-50.txt", quote="\"")
View(dur50)
summary(dur50)
hist(dur50$V1)
extRemes
setwd("~/Dropbox/Research/Data/richness-simulations")
load(.rData)
load(".RData")
View(dur50)
View(dur5)
View(dur10)
View(pfg)
summary(pfglarge$Richness)
richness <- read.delim("~/Dropbox/Research/Data/richness-simulations/richness-values.txt")
View(richness)
mean(richness$richness)
mean(dur2$V1)
mean(dur3$V1)
mean(dur5$V1)
mean(dur10$V1)
mean(dur50$V1)
dur20 <- read.table("~/Dropbox/Research/Data/richness-simulations/unique-traits-duration-20.txt", quote="\"")
View(dur20)
mean(dur20$V1)
tarich <- read.delim("~/Dropbox/Research/Data/richness-simulations/richness-by-duration.txt")
View(tarich)
plot(tarich$duration, tarich$meanrich)
lm(tarich$duration ~ tarich$meanrich)
fit <- lm(tarich$duration ~ tarich$meanrich)
summary(fit)
save.image("~/Dropbox/Research/Data/richness-simulations/richness-analysis.RData")
abline(fit)
abline(reg=fit)
fit2 <- lm(meanrich ~ duration, data=tarich)
summary(fit2)
abline(fit2)
plot(tarich$duration, tarich$meanrich)
abline(fit2)
save.image("~/Dropbox/Research/Data/richness-simulations/richness-analysis.RData")
plot(richness$time, richness$richness)
summary(richness)
View(pfglarge)
summary(pfglarge$Richness)
save.image("~/Dropbox/Research/Data/richness-simulations/richness-analysis.RData")
View(pfglt100assem)
View(pfglarge)
View(pfg)
View(pfglarge)
View(pfglt100assem)
View(pfglt200assem)
fix(r)
PFGData.decorated.totals <- read.csv("~/Dropbox/Research/Dissertation Project/data/PFGData-decorated-totals.csv")
View(PFGData.decorated.totals)
save.image("~/Dropbox/Research/Dissertation Project/data/pfg-richness-decorated-sherds.RData")
plot(cumsum(rnorm(100, mean=0, sd=1)), t="l", col="darkblue", lwd=3)
plot(cumsum(rnorm(100, mean=0, sd=1)), t="l", col="darkblue", lwd=3)
plot(cumsum(rnorm(100, mean=0, sd=1)), t="l", col="darkblue", lwd=3)
help(plot)
test <- read.delim("~/Dropbox/Research/Dissertation Project/analysis/saa2012/test.txt")
View(test)
plot3d(test$Theta, test$Windowsize, test$SlatkinExactP)
install.packages(c("KernSmooth", "MASS", "Matrix", "boot", "cluster", "foreign", "mgcv", "nlme", "rpart", "survival"))
plot(test$Windowsize, test$SlatkinExactP)
sweep <- read.delim("~/Dropbox/Research/Dissertation Project/analysis/saa2012/unified-slatkin-results-by-windowsize-and-gen")
View(sweep)
class(sweep$Model)
coplot(sweep$Windowsize ~ sweep$SlatkinExactP | sweep$Model)
coplot(sweep$Windowsize ~ sweep$SlatkinExactP | sweep$Model)
coplot(sweep$Theta ~ sweep$SlatkinExactP | sweep$Model)
sweep$ThetaFactor <- factor(sweep$Theta)
View(sweep)
save.image("~/Dropbox/Research/Dissertation Project/analysis/saa2012/analysis-unbiased-conformism-slatkin-sweep.RData")
sweep.unbiased <- subset(sweep, sweep$Model == "WrightFisherDrift")
View(sweep.unbiased)
sweep.unbiased$WindowFactor <- factor(sweep.unbiased$Windowsize)
View(sweep.unbiased)
coplot(sweep.unbiased$Theta ~ sweep.unbiased$SlatkinExactP | sweep.unbiased$WindowFactor)
save.image("~/Dropbox/Research/Dissertation Project/analysis/saa2012/analysis-unbiased-conformism-slatkin-sweep.RData")
xbar <- tapply(sweep.unbiased$SlatkinExactP,sweep.unbiased$WindowFactor,mean)
sd <- tapply(sweep.unbiased$SlatkinExactP,sweep.unbiased$WindowFactor, sd)
n <- tapply(sweep.unbiased$SlatkinExactP,sweep.unbiased$WindowFactor, length)
cbind(mean=xbar,stdev=sd,n=n)
signifcance.slatkin <- function(x) {}
signifcance.slatkin <- function(x) {if(x < 0.05 || x > 0.95) {z <- 1} else {z <- 0} return(z)}
signifcance.slatkin <- function(x) {if((x < 0.05) || (x > 0.95) {z <- 1} else {z <- 0} return(z)}
signifcance.slatkin <- function(x) {if((x < 0.05) || (x > 0.95)) {z <- 1} else {z <- 0} return(z)}
signifcance.slatkin <- function(x) {if(x < 0.05) {z <- 1} else if (x > 0.95) { z <- 1} else {z <- 0} return(z)}
fix(signifcance.slatkin)
sigslat <- function(x) { return(ifelse(x < 0.05 | x > 0.95, 1, 0)) }
sigslat(0.55)
sigslat(0.99)
sigslat(0.01)
sweep.unbiased$SigSlat <- tapply(sweep.unbiased$SlatkinExactP,n=2,sigslat)
sweep.ub.sign <- transform(sweep.unbiased,sslat = sigslat(sweep.unbiased$SlatkinExactP))
View(sweep.ub.sign)
save.image("~/Dropbox/Research/Dissertation Project/analysis/saa2012/analysis-unbiased-conformism-slatkin-sweep.RData")
table(sweep.ub.sign$sslat,sweep.ub.sign$WindowFactor)
prop.table(sweep.ub.sign$sslat,sweep.ub.sign$WindowFactor)
ub.sign <- table(sweep.ub.sign$sslat,sweep.ub.sign$WindowFactor)
prop.table(ub.sign,1)
prop.table(ub.sign,2)
table(sweep.ub.sign$sslat,sweep.ub.sign$WindowFactor,sweep.ub.sign$ThetaFactor)
ubsign.bytheta.bywindow <- table(sweep.ub.sign$sslat,sweep.ub.sign$WindowFactor,sweep.ub.sign$ThetaFactor)
prop.table(ubsign.bytheta.bywindow,2)
ubsign.bytheta.bywindow / sum(ubsign.bytheta.bywindow)
ubsign.bytheta.bywindow
save.image("~/Dropbox/Research/Dissertation Project/analysis/saa2012/analysis-unbiased-conformism-slatkin-sweep.RData")
sweep.conf <- subset(sweep, sweep$Model == "ConformistDrift")
sweep.conf$WindowFactor <- factor(sweep.conf$Windowsize)
sweep.conf$ThetaFactor <- factor(sweep.conf$Theta)
sweep.conf.sign <- transform(sweep.conf,sslat = sigslat(sweep.conf$SlatkinExactP))
View(sweep.conf.sign)
conf.sign <- table(sweep.conf.sign$sslat,sweep.conf.sign$WindowFactor)
prop.table(conf.sign,2)
sweep.conf$ConfFactor <- factor(sweep.conf$ConformismRate)
View(sweep.conf)
sweep.conf.signfull <- transform(sweep.conf,sslat = sigslat(sweep.conf$SlatkinExactP))
View(sweep.conf.signfull)
conf.signfull <- table(sweep.conf.signfull$sslat,sweep.conf.signfull$WindowFactor, sweep.conf.signfull$ConfFactor)
conf.signfull
conf.signfull2 <- table(sweep.conf.signfull$sslat,sweep.conf.signfull$WindowFactor, sweep.conf.signfull$ConfFactor, sweep.conf.signfull$ThetaFactor)
conf.signfull2
save.image("~/Dropbox/Research/Dissertation Project/analysis/saa2012/analysis-unbiased-conformism-slatkin-sweep.RData")
View(sweep.unbiased)
View(sweep.unbiased)
fix(conf.sign)
conf.sign
knsample <- read.delim("~/Dropbox/Research/Dissertation Project/analysis/saa2012/unified-trait-richness-conf-wf-5000-50000.txt")
View(knsample)
knsample.wf <- subset(knsample, knsample$Model == "WrightFisherDrift")
sweep.conf <- subset(sweep, sweep$Model == "ConformistDrift")
knsample.cf <- subset(knsample, knsample$Model == "ConformistDrift")
View(knsample.cf)
View(knsample.cf)
View(knsample.cf)
View(knsample.wf)
rm(knsample.wf)
rm(knsample.cf)
knsample$WindowFactor <- factor(knsample$Windowsize)
knsample$ThetaFactor <- factor(knsample$Theta)
View(knsample)
knsample$ConfFactor <- factor(knsample$ConformismRate)
View(knsample)
knsample.wf <- subset(knsample, knsample$Model == "WrightFisherDrift")
knsample.cf <- subset(knsample, knsample$Model == "ConformistDrift")
save.image("~/Dropbox/Research/Dissertation Project/analysis/saa2012/analysis-kn-richness.RData")
rm(sweep)
rm(swee.conf)
rm(sweep.conf)
rm(sweep.conf.sign)
rm(sweep.conf.signfull)
rm(sweep.ub.sign)
rm(sweep.unbiased)
rm(conf.sign)
rm(conf.signfull)
rm(conf.signfull2)
rm(n)
rm(sd)
rm(ub.sign)
rm(ubsign.bytheta.bywindow)
rm(xbar)
rm(significance.slatkin)
rm(significance.slatkin(x))
ls
!save
save.image("~/Dropbox/Research/Dissertation Project/analysis/saa2012/analysis-kn-richness.RData")
install.package("ggplot2")
install.packages("ggplot2")
qplot(Theta, Kn, data = knsample.wf)
library("ggplot2")
qplot(Theta, Kn, data = knsample.wf)
library("epicalc")
install.packages("epicalc")
library("epicalc")
attach(knsample.wf)
aggregate(Kn, by = LIST(WindowFactor,ThetaFactor), FUN=c("mean", "sd", "min", "max", "length"))
aggregate(Kn, by = LIST(WindowFactor,ThetaFactor), FUN="mean")
aggregate(Kn, by = list(WindowFactor,ThetaFactor), FUN="mean")
aggregate(Kn, by = list(WindowFactor,ThetaFactor), FUN=mean)
warnings()
aggregate(knsample.wf$Kn, by = list(WindowFactor,ThetaFactor), FUN=mean)
warnings()
aggregate(knsample.wf$Kn, by = list(WindowFactor,ThetaFactor), mean)
warnings()
knsample.wf$Kn
aggregate(knsample.wf, by = list(WindowFactor,ThetaFactor), mean)
aggregate(knsample.wf$Kn, by = list(WindowSize = knsample.wf$WindowFactor,Theta = knsample.wf$ThetaFactor), mean)
aggregate.data.frame(knsample.wf$Kn, by = list(WindowSize = knsample.wf$WindowFactor,Theta = knsample.wf$ThetaFactor), mean)
warnings()
mean(knsample.wf$Kn)
num <- as.numeric(knsample.wf$kn)
num
num <- as.numeric(knsample.wf$Kn)
num
aggregate.data.frame(as.numeric(knsample.wf$Kn), by = list(WindowSize = knsample.wf$WindowFactor,Theta = knsample.wf$ThetaFactor), mean)
knsample.wf <- transform(knsample.wf, Kn = as.numeric(Kn))
aggregate.data.frame(knsample.wf$Kn, by = list(WindowSize = knsample.wf$WindowFactor,Theta = knsample.wf$ThetaFactor), mean)
knsample.wf.mean <- aggregate.data.frame(knsample.wf$Kn, by = list(WindowSize = knsample.wf$WindowFactor,Theta = knsample.wf$ThetaFactor), mean)
knsample.wf.sd <- aggregate.data.frame(knsample.wf$Kn, by = list(WindowSize = knsample.wf$WindowFactor,Theta = knsample.wf$ThetaFactor), sd)
View(knsample.wf.sd)
View(knsample.wf.sd)
knsample.cf <- transform(knsample.cf, knsample.cf$Kn = as.numeric(knsample.cf$Kn))
attach(knsample.cf)
knsample.cf <- transform(knsample.cf, Kn = as.numeric(Kn))
knsample.cf.mean <- aggregate.data.frame(knsample.cf$Kn, by = list(WindowSize = knsample.cf$WindowFactor,Theta = knsample.cf$ThetaFactor), mean)
knsample.cf.sd <- aggregate.data.frame(knsample.cf$Kn, by = list(WindowSize = knsample.cf$WindowFactor,Theta = knsample.cf$ThetaFactor), sd)
knsample.wf.summary <- cbind(knsample.wf.mean, knsample.wf.sd)
knsample.wf.summary
rm(knsample.wf.summary)
merge(knsample.wf.mean, knsample.wf.sd, by="WindowSize,Theta")
merge(knsample.wf.mean, knsample.wf.sd, by="WindowSize")
merge(knsample.wf.mean, knsample.wf.sd, by.x="WindowSize", by.y="Theta")
merge(knsample.wf.mean, knsample.wf.sd, by=intersect(WindowSize,Theta))
merge(knsample.wf.mean, knsample.wf.sd, by=intersect("WindowSize","Theta"))
view(knsample.wf)
View(knsample.wf)
View(knsample.wf.Theta)
knsample.wf$Theta
View(knsample.wf.mean)
library(qqplot2)
library(ggplot2)
qplot(knsample.wf.mean$Theta,knsample.wf.mean$x)
qplot(knsample.wf.mean$WindowSize,knsample.wf.mean$x)
knsample.wf.mean <- transform(knsample.wf.mean, )
attach(knsample.wf.mean)
knsample.wf.mean
knsample.wf.mean <- transformer(knsample.wf.mean, WindowSize = as.numeric(WindowSize))
knsample.wf.mean <- transform(knsample.wf.mean, WindowSize = as.numeric(WindowSize))
knsample.wf.mean <- transform(knsample.wf.mean, Theta = as.numeric(Theta))
qplot(knsample.wf.mean$WindowSize,knsample.wf.mean$x)
names(knsample.wf.mean)
names(knsample.wf.mean) <- c("Window Size", "Theta", "Mean Kn")
names(knsample.wf.mean)
v <- ggplot(volcano3d, aes("Window Size", "Theta", z = "Mean Kn"))
v <- ggplot(knsample.wf.mean, aes("Window Size", "Theta", z = "Mean Kn"))
v + stat_contour(binwidth = 5)
v + stat_contour(bins = 10)
v + stat_contour(bins = 5)
v
v + stat_contour()
v + stat_contour(bins=2)
Library(lattice)
library(lattice)
wireframe("Mean Kn" ~ "Window Size" * "Theta", data = knsample.wf.mean, drape=TRUE, colorkey=TRUE, screen = list(z = -60, x = -60))
class("Mean Kn")
knsample.wf.mean <- transform(knsample.wf.mean, "Mean Kn" = as.numeric("Mean Kn"))
knsample.wf.mean
rm(knsample.wf.mean)
knsample.wf.mean <- aggregate(as.numeric(knsample.wf$Kn), by = list(Windowsize = knsample.wf$WindowFactor, Theta))
knsample.wf
View(knsample.wf)
knsample.wf.mean <- aggregate.data.frame(knsample.wf$Kn, by = list(WindowSize = knsample.wf$WindowFactor,Theta = knsample.wf$ThetaFactor), mean)
knsample.wf.mean <- transform(knsample.wf.mean, knsample.wf.mean$x = as.numeric(knsample.wf.mean$x))
knsample.wf.mean
attach(knsample.wf.mean)
knsample.wf.mean <- transform(knsample.wf.mean, x = as.numeric(x))
knsample.wf.mean <- transform(knsample.wf.mean, WindowSize = as.numeric(WindowSize))
knsample.wf.mean <- transform(knsample.wf.mean, Theta = as.numeric(Theta))
wireframe(x ~ WindowSize * Theta, data = knsample.wf.mean, drape=TRUE, colorkey=TRUE, screen = list(z = -60, x = -60))
v <- ggplot(knsample.wf.mean, aes("Window Size", "Theta", z = "Mean Kn"))
v <- ggplot(knsample.wf.mean, aes("WindowSize", "Theta", z = "x"))
v + stat_contour()
class(names(knsample.wf.mean))
class(knsample.wf.mean)
class(knsample.wf.mean$x)
class(knsample.wf.mean$Theta)
class(knsample.wf.mean$WindowSize)
View(knsamples.wf.mean)
View(knsample.wf.mean)
knsample.wf.mean
rm(knsample.wf.mean)
knsample.wf.mean <- aggregate.data.frame(knsample.wf$Kn, by = list(WindowSize = knsample.wf$WindowFactor,Theta = knsample.wf$ThetaFactor), mean)
knsample.wf.mean
write.csv(knsample.wf.mean, file="knsample-wf-mean.csv", row.names="T")
write.csv(knsample.wf.mean, file="knsample-wf-mean.csv", row.names=T)
knsample.wf
######################
# SAA2012
#
# Analysis of Tf diversity test results from Wright-Fisher models
# under time-averaging.
#
# Mark E. Madsen (c) 2012 All rights reserved.
# Software and Analysis for Mark E. Madsen SAA 2012 Papers is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
# Based on a work at github.com.  See license.html for link to CC 3.0 license
#
######################
setwd("~/Dropbox/Research/Dissertation Project/analysis/saa2012/tf-diversity")
library(ggplot2)
library(plyr)
#### function definitions ####
#sigslat <- function(x) { return(ifelse(x < 0.05 | x > 0.95, 1, 0)) }
#### pull in data files ####
tfdiverse <- read.delim("../rawdata/wf-0.1-100-e100-combined-tf.txt", header=TRUE, colClasses = c("factor","numeric","integer","numeric","character","numeric", "numeric","numeric","numeric"))
lifetime.longtheta <- read.delim("../rawdata/wf-0.1-100-e100-combined-lifetime.txt", header=TRUE, colClasses = c("factor","numeric","integer","numeric","numeric","numeric","numeric","numeric","numeric","integer"))
# statistical summary for add mean, stdev, stderr
tfdiverse.stat <- ddply(tfdiverse, .(Theta,Windowsize), summarise, MeanTf = mean(TfEst), StdevTf = sd(TfEst), StdErrTf = sd(TfEst)/sqrt(length(TfEst)))
# determine mean lifetime for each theta value (windowsize doesn't figure into this)
lifetime.longtheta.stat <- ddply(lifetime.longtheta, .(Theta), summarise, mean_lifetime = mean(MeanLifetime))
# add mean lifetime and calculate mean lifetime scaled TA duration
tfdiverse.stat <- merge(tfdiverse.stat, lifetime.longtheta.stat, by = "Theta")
tfdiverse.stat$TLScaledTADur <- tfdiverse.stat$Windowsize / tfdiverse.stat$mean_lifetime
errorbars <- aes(ymax = MeanTf + (StdevTf), ymin = MeanTf - (StdevTf) )
qplot(log(TLScaledTADur), MeanTf, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "T_f Diversity Index", data = tfdiverse.stat, main="T_f Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars, stat="identity")
ggsave(file = "images/wf-0.1-100-100-tf-index-abline-labels.pdf")
View(tfdiverse.stat)
View(tfdiverse.stat)
View(tfdiverse)
View(tfdiverse)
######################
# SAA2012
#
# Analysis of Tf diversity test results from Wright-Fisher models
# under time-averaging.
#
# Mark E. Madsen (c) 2012 All rights reserved.
# Software and Analysis for Mark E. Madsen SAA 2012 Papers is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
# Based on a work at github.com.  See license.html for link to CC 3.0 license
#
######################
setwd("~/Dropbox/Research/Dissertation Project/analysis/saa2012/tf-diversity")
library(ggplot2)
library(plyr)
#### function definitions ####
#sigslat <- function(x) { return(ifelse(x < 0.05 | x > 0.95, 1, 0)) }
#### pull in data files ####
tfdiverse <- read.delim("../rawdata/wf-0.1-100-e100-combined-tf.txt", header=TRUE, colClasses = c("factor","numeric","integer","numeric","character","numeric", "numeric","numeric","numeric"))
lifetime.longtheta <- read.delim("../rawdata/wf-0.1-100-e100-combined-lifetime.txt", header=TRUE, colClasses = c("factor","numeric","integer","numeric","numeric","numeric","numeric","numeric","numeric","integer"))
# statistical summary for add mean, stdev, stderr
tfdiverse.stat <- ddply(tfdiverse, .(Theta,Windowsize), summarise, MeanTf = mean(TfEst), StdevTf = sd(TfEst), StdErrTf = sd(TfEst)/sqrt(length(TfEst)), MeanIQV = mean(IQV), StdevIQV = sd(IQV))
# determine mean lifetime for each theta value (windowsize doesn't figure into this)
lifetime.longtheta.stat <- ddply(lifetime.longtheta, .(Theta), summarise, mean_lifetime = mean(MeanLifetime))
# add mean lifetime and calculate mean lifetime scaled TA duration
tfdiverse.stat <- merge(tfdiverse.stat, lifetime.longtheta.stat, by = "Theta")
tfdiverse.stat$TLScaledTADur <- tfdiverse.stat$Windowsize / tfdiverse.stat$mean_lifetime
errorbars <- aes(ymax = MeanTf + (StdevTf), ymin = MeanTf - (StdevTf) )
qplot(log(TLScaledTADur), MeanTf, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "T_f Diversity Index", data = tfdiverse.stat, main="T_f Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars, stat="identity")
ggsave(file = "images/wf-0.1-100-100-tf-index-abline-labels.pdf")
errorbars2 <- aes(ymax = MeanIQV + (StdevIQV), ymin = MeanIQV - (StdevIQV) )
qplot(log(TLScaledTADur), MeanTf, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "IQV Diversity Index", data = tfdiverse.stat, main="IQV Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars, stat="identity")
ggsave(file = "images/wf-0.1-100-100-iqv-index-abline-labels.pdf")
errorbars2 <- aes(ymax = MeanIQV + (StdevIQV), ymin = MeanIQV - (StdevIQV) )
qplot(log(TLScaledTADur), MeanTf, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "IQV Diversity Index", data = tfdiverse.stat, main="IQV Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars2, stat="identity")
ggsave(file = "images/wf-0.1-100-100-iqv-index-abline-labels.pdf")
errorbars2 <- aes(ymax = MeanIQV + (StdevIQV), ymin = MeanIQV - (StdevIQV) )
qplot(log(TLScaledTADur), MeanIQV, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "IQV Diversity Index", data = tfdiverse.stat, main="IQV Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars2, stat="identity")
ggsave(file = "images/wf-0.1-100-100-iqv-index-abline-labels.pdf")
errorbars2 <- aes(ymax = MeanIQV + (StdevIQV), ymin = MeanIQV - (StdevIQV) )
qplot(log(TLScaledTADur), MeanIQV, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "IQV Diversity Index", data = tfdiverse.stat, main="IQV Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3) + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars2, stat="identity")
ggsave(file = "images/wf-0.1-100-100-iqv-index-abline-labels.pdf")
errorbars2 <- aes(ymax = MeanIQV + (StdevIQV), ymin = MeanIQV - (StdevIQV) )
qplot(log(TLScaledTADur), MeanIQV, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "IQV Diversity Index", data = tfdiverse.stat, main="IQV Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars2, stat="identity")
ggsave(file = "images/wf-0.1-100-100-iqv-index-abline-labels.pdf")
View(tfdiverse.stat)
View(tfdiverse.stat)
######################
# SAA2012
#
# Analysis of Tf diversity test results from Wright-Fisher models
# under time-averaging.
#
# Mark E. Madsen (c) 2012 All rights reserved.
# Software and Analysis for Mark E. Madsen SAA 2012 Papers is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
# Based on a work at github.com.  See license.html for link to CC 3.0 license
#
######################
setwd("~/Dropbox/Research/Dissertation Project/analysis/saa2012/tf-diversity")
library(ggplot2)
library(plyr)
#### function definitions ####
#sigslat <- function(x) { return(ifelse(x < 0.05 | x > 0.95, 1, 0)) }
#### pull in data files ####
tfdiverse <- read.delim("../rawdata/wf-0.1-100-e100-combined-tf.txt", header=TRUE, colClasses = c("factor","numeric","integer","numeric","character","numeric", "numeric","numeric","numeric","numeric"))
lifetime.longtheta <- read.delim("../rawdata/wf-0.1-100-e100-combined-lifetime.txt", header=TRUE, colClasses = c("factor","numeric","integer","numeric","numeric","numeric","numeric","numeric","numeric","integer"))
# statistical summary for add mean, stdev, stderr
tfdiverse.stat <- ddply(tfdiverse, .(Theta,Windowsize), summarise, MeanTf = mean(TfEst), StdevTf = sd(TfEst), StdErrTf = sd(TfEst)/sqrt(length(TfEst)), MeanIQV = mean(IQV), StdevIQV = sd(IQV), mean_sw = mean(ShannonWeaver), stdev_sw = sd(ShannonWeaver))
# determine mean lifetime for each theta value (windowsize doesn't figure into this)
lifetime.longtheta.stat <- ddply(lifetime.longtheta, .(Theta), summarise, mean_lifetime = mean(MeanLifetime))
# add mean lifetime and calculate mean lifetime scaled TA duration
tfdiverse.stat <- merge(tfdiverse.stat, lifetime.longtheta.stat, by = "Theta")
tfdiverse.stat$TLScaledTADur <- tfdiverse.stat$Windowsize / tfdiverse.stat$mean_lifetime
errorbars <- aes(ymax = MeanTf + (StdevTf), ymin = MeanTf - (StdevTf) )
qplot(log(TLScaledTADur), MeanTf, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "T_f Diversity Index", data = tfdiverse.stat, main="T_f Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars, stat="identity")
ggsave(file = "images/wf-0.1-100-100-tf-index-abline-labels.pdf")
errorbars2 <- aes(ymax = MeanIQV + (StdevIQV), ymin = MeanIQV - (StdevIQV) )
qplot(log(TLScaledTADur), MeanIQV, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "IQV Diversity Index", data = tfdiverse.stat, main="IQV Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars2, stat="identity")
ggsave(file = "images/wf-0.1-100-100-iqv-index-abline-labels.pdf")
View(tfdiverse)
View(tfdiverse)
######################
# SAA2012
#
# Analysis of Tf diversity test results from Wright-Fisher models
# under time-averaging.
#
# Mark E. Madsen (c) 2012 All rights reserved.
# Software and Analysis for Mark E. Madsen SAA 2012 Papers is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
# Based on a work at github.com.  See license.html for link to CC 3.0 license
#
######################
setwd("~/Dropbox/Research/Dissertation Project/analysis/saa2012/tf-diversity")
library(ggplot2)
library(plyr)
#### function definitions ####
#sigslat <- function(x) { return(ifelse(x < 0.05 | x > 0.95, 1, 0)) }
#### pull in data files ####
tfdiverse <- read.delim("../rawdata/wf-0.1-100-e100-combined-tf.txt", header=TRUE, colClasses = c("factor","numeric","integer","numeric","character","numeric", "numeric","numeric","numeric","numeric"))
lifetime.longtheta <- read.delim("../rawdata/wf-0.1-100-e100-combined-lifetime.txt", header=TRUE, colClasses = c("factor","numeric","integer","numeric","numeric","numeric","numeric","numeric","numeric","integer"))
# statistical summary for add mean, stdev, stderr
tfdiverse.stat <- ddply(tfdiverse, .(Theta,Windowsize), summarise, MeanTf = mean(TfEst), StdevTf = sd(TfEst), StdErrTf = sd(TfEst)/sqrt(length(TfEst)), MeanIQV = mean(IQV), StdevIQV = sd(IQV), mean_sw = mean(ShannonWeaver), stdev_sw = sd(ShannonWeaver))
# determine mean lifetime for each theta value (windowsize doesn't figure into this)
lifetime.longtheta.stat <- ddply(lifetime.longtheta, .(Theta), summarise, mean_lifetime = mean(MeanLifetime))
# add mean lifetime and calculate mean lifetime scaled TA duration
tfdiverse.stat <- merge(tfdiverse.stat, lifetime.longtheta.stat, by = "Theta")
tfdiverse.stat$TLScaledTADur <- tfdiverse.stat$Windowsize / tfdiverse.stat$mean_lifetime
errorbars <- aes(ymax = MeanTf + (StdevTf), ymin = MeanTf - (StdevTf) )
qplot(log(TLScaledTADur), MeanTf, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "T_f Diversity Index", data = tfdiverse.stat, main="T_f Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars, stat="identity")
ggsave(file = "images/wf-0.1-100-100-tf-index-abline-labels.pdf")
errorbars2 <- aes(ymax = MeanIQV + (StdevIQV), ymin = MeanIQV - (StdevIQV) )
qplot(log(TLScaledTADur), MeanIQV, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "IQV Diversity Index", data = tfdiverse.stat, main="IQV Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars2, stat="identity")
ggsave(file = "images/wf-0.1-100-100-iqv-index-abline-labels.pdf")
View(tfdiverse)
View(tfdiverse)
View(tfdiverse.stat)
View(tfdiverse.stat)
errorbars3 <- aes(ymax = mean_sw + (stdev_sw), ymin = mean_sw - (stdev_sw) )
qplot(log(TLScaledTADur), MeanIQV, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "Shannon Weaver Diversity Index", data = tfdiverse.stat, main="Shannon Weaver Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars3, stat="identity")
ggsave(file = "images/wf-0.1-100-100-sw-index-abline-labels.pdf")
errorbars3 <- aes(ymax = mean_sw + (stdev_sw), ymin = mean_sw - (stdev_sw) )
qplot(log(TLScaledTADur), mean_sw, xlab = "Log(TA Duration Scaled by Trait Lifetime)", ylab = "Shannon Weaver Diversity Index", data = tfdiverse.stat, main="Shannon Weaver Diversity Index for Theta 0.1-100") + geom_point(colour = alpha("#0000FF", 2/3)) + facet_wrap(~ Theta, ncol = 3, scales = "free_y") + geom_line(colour = alpha("black", 1/4)) + geom_vline(xintercept = log(1), colour = alpha("#FF0000", 1/3), size=1.5) + geom_smooth(errorbars3, stat="identity")
ggsave(file = "images/wf-0.1-100-100-sw-index-abline-labels.pdf")
View(lifetime.longtheta)
View(lifetime.longtheta)
View(lifetime.longtheta)
